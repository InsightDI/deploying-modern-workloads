name: Terraform Plan

on:
  workflow_dispatch: # This configures the GitHub workflow to be triggered manually in the GitHub UI.
    inputs: # For declaring input parameters.
      namePrefix:
        description: "Prefix for naming"
        required: true
      nameDigits:
        description: "The digits used for unique naming"
        required: true
      tfvarsFile:
        description: "'.tfvars' file with variable values"
        required: true

jobs:
  terraform:
    runs-on: ubuntu-latest

    env: # Sets up environment variables.
      ARM_CLIENT_ID: ${{secrets.DMW_ARM_CLIENT_ID}}
      ARM_CLIENT_SECRET: ${{secrets.DMW_ARM_CLIENT_SECRET}}
      ARM_SUBSCRIPTION_ID: ${{secrets.DMW_ARM_SUBSCRIPTION_ID}}
      ARM_TENANT_ID: ${{secrets.DMW_ARM_TENANT_ID}}

    steps:
      - uses: actions/checkout@v2

      # Initialize the 'Terraform Setup' GitHub Action, which installs Terraform on the GitHub Action container.
      - name: Setup Terraform
        # The 'uses' clause identifies where this GitHub Action can be found.
        # E.g., https://github.com/hashicorp/setup-terraform
        uses: hashicorp/setup-terraform@v1
        # The 'with' clause is for passing configuration values to the Action.
        with:
          # This allows us to use remote state in Azure storage instead of Terraform Cloud or Terraform Enterprise.
          terraform_wrapper: false

      # Execute `terraform init`, which parses the Terraform code and initializes the requested Terraform providers
      # (like 'azurerm') and also initializes the backend state store (Azure storage in this case).
      - name: Terraform Init
        # 'run' specifies the command that will be run.  The 'terraform init' accepts various '-backend-config'
        # values, which specify where the backend state will be stored.
        run: terraform init -backend-config="resource_group_name=dmw-lab-${{ github.event.inputs.nameDigits }}-${{ github.event.inputs.namePrefix }}-hub" -backend-config="storage_account_name=${{ github.event.inputs.namePrefix }}cloudshell${{ github.event.inputs.nameDigits }}" -backend-config="container_name=terraform-state" -backend-config="key=terraform.tfstate"

      # Execute 'terraform plan' and pass your '.tfvars' file with your deployment configuration values.
      - name: Terraform Plan
        run: |
          terraform validate
          terraform plan -var-file '${{ github.event.inputs.tfvarsFile }}'
